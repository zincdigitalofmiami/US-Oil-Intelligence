steps:
# 1. Install dependencies for linting and testing
- name: 'python:3.11-slim'
  entrypoint: 'pip'
  args: ['install', '-r', 'requirements.txt', 'flake8', 'pytest']
  id: 'Install Deps'

# 2. Run Linter (Flake8)
# This step will fail the build if linting errors are found.
- name: 'python:3.11-slim'
  entrypoint: 'flake8'
  args: ['./svc']
  id: 'Lint'
  waitFor: ['Install Deps']

# 3. Run Unit Tests (Pytest)
# This step will fail the build if tests fail. Assumes tests are in ./svc/tests
- name: 'python:3.11-slim'
  entrypoint: 'pytest'
  args: ['./svc/tests']
  id: 'Test'
  waitFor: ['Install Deps']

# 4. Build the container image (only if linting and tests pass)
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA', '.']
  id: 'Build'
  waitFor: ['Lint', 'Test']

# 5. Push the container image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA']
  id: 'Push'
  waitFor: ['Build']

# 6. Deploy container image to Cloud Run
- name: 'gcr.io/google-appengine/exec-wrapper'
  args:
  - '-i'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
  - '--'
  - 'gcloud'
  - 'run'
  - 'deploy'
  - '${_SERVICE_NAME}'
  - '--image'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
  - '--region'
  - '${_REGION}'
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated'
  # Example for securely injecting secrets:
  # '--update-secrets=MY_API_KEY=my-api-key-secret:latest'
  id: 'Deploy Backend'
  waitFor: ['Push']

# 7. Deploy to Firebase Hosting
- name: 'gcr.io/cloud-builders/npm'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'npm install -g firebase-tools && firebase deploy --only hosting --project $PROJECT_ID --non-interactive --token $$FIREBASE_TOKEN'
  secretEnv: ['FIREBASE_TOKEN']
  id: 'Deploy Frontend'

images:
- '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'

# This configuration uses Secret Manager for the Firebase token.
# See setup instructions in the Cloud Build documentation.
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/firebase-ci-token/versions/latest
    env: 'FIREBASE_TOKEN'

# Default values for substitutions. Can be overridden in your trigger.
substitutions:
  _SERVICE_NAME: soy-intel-svc
  _REGION: us-central1
  _REPO_NAME: soy-intel-repository
